/*
This query is intended to be run in 'DAX Studio.
It is designed to speed up report documentation.
Change the 'Results' dropdown to 'Static' in the 'Home' tab > 'Output' option.
*/

DEFINE
 
VAR _info = 
	{
		("POWER BI",,"Created at: ",FORMAT(UTCNOW(), "d. mmm yyyy, h:nn") & " UTC"),
		("DOCUMENTATION",,"Script: ","https://github.com/fulopattilak/data-and-bi/wiki/Report-documentation-with-DAX-Studio"),
		(,,,),
		(,"Sheet", "Table Name", "Description"),
		(,,,),
		(,"Query 2", "Tables", "Describes the tables loaded from Power Query and all calculated tables."),
		(,"Query 3", "Columns", "Describes columns and calculated columns."),
		(,"Query 4", "Measures", "Describes all measures."),
		(,"Query 5", "Relationships","Describes the relationships between tables."),
		(,"Query 6", "Other Queries","Describes the queries that are used in Power Query, but not loaded to the model."),
		(,"Query 7", "Incremental Tables", "Describes the incremental refresh policy of the tables (if any)."),
		(,"Query 8", "RLS Roles", "Lists the RLS roles that are set (if any)."),
		(,"Query 9", "RLS Filters", "Describes the filtering criteria for RLS roles."),
		(,"Query 10", "Dependencies", "Describes table column and measure dependencies.")
	}

-- DIM tables

VAR _iteratorFunctions = 
	{
		"SUMX(",
		"AVERAGEX(",
		"MINX(",
		"MAXX(",
		"COUNTX(",
		"RANKX(",
		"PRODUCTX(",
		"FILTER(",
		"CALCULATETABLE(",
		"ADDCOLUMNS(",
		"GENERATE(",
		"GENERATEALL(",
		"GROUPBY(",
		"SELECTCOLUMNS(",
		"SUMMARIZE(",
		"SUMMARIZECOLUMNS("
	}


VAR _refreshGranularity =
	SELECTCOLUMNS(
		{
			("Invalid", -1),
			("Day(s)", 0),
			("Month(s)", 1),
			("Quarter(s)", 2),
			("Year(s)", 3)
		},
		"Granularity", [Value1],
		"Granularity ID", [Value2]
	)
VAR _refreshMode =
	SELECTCOLUMNS(
		{
			("Import", 0, "Creates import partitions during incremental refresh."),
			("Hybrid", 1, "Creates import and DirectQuery partitions during incremental refresh.")
		},
		"Refresh Mode", [Value1],
		"Refresh Mode ID", [Value2],
		"Refresh Mode Description", [Value3]
	)

-- STAGING tables

VAR _rlsTbl =
SELECTCOLUMNS(
	INFO.ROLES(),
	"RLS Role ID", [ID],
	"Role", [Name],
	"Description", [Description]
)
VAR _tablesTbl =
	SELECTCOLUMNS(
		INFO.TABLES(),
			"Table ID", [ID],
			"Table", [Name]
	)
	
--OUTPUT tables

VAR _dependencies =
	SELECTCOLUMNS(INFO.CALCDEPENDENCY(),
		"Dependencies", BLANK(),
		"Object", [OBJECT],
		"Table", [TABLE],
		"Type", LOWER([OBJECT_TYPE]),
		"Referenced Object", [REFERENCED_OBJECT],
		"Referenced Table", [REFERENCED_TABLE],
		"Referenced Type", LOWER([REFERENCED_OBJECT_TYPE])
	)
VAR _columns =
	NATURALLEFTOUTERJOIN(
		NATURALINNERJOIN(
			NATURALINNERJOIN(
				SELECTCOLUMNS(
					INFO.VIEW.COLUMNS(),
					"Columns", BLANK(),
					[Table],
					"Column", [Name],
					[Description],
					[Expression],
					"Format String", [FormatString]
				),
				SELECTCOLUMNS(
					COLUMNSTATISTICS(),
					"Table", [Table Name],
					"Column", [Column Name],
					"Lowest Value", [Min],
					"Highest Value", [Max],
					[Cardinality],
					[Max Length]
				)
			),
			SELECTCOLUMNS(
				INFO.VIEW.COLUMNS(),
				[Table],
				"Column", [Name],
				"Data Type", [DataType],
				"Is Hidden", [IsHidden],
				"Is Unique", [IsUnique],
				"Sorted By", [SortByColumn],
				"Category", [DataCategory]
			)
		),
		SELECTCOLUMNS(
		GROUPBY(FILTER(_dependencies, [Referenced Type] = "MEASURE" && [Type] = "CALC_COLUMN"), [Object], [Table], "Referenced Measures", COUNTX(CURRENTGROUP(),1)),
			"Column", [Object],
			[Table],
			[Referenced Measures]
		)
	)
VAR _tables =
	NATURALINNERJOIN(
		SELECTCOLUMNS(
			INFO.VIEW.TABLES(),
			"Tables", BLANK(),
			"Table", [Name],
			[Description],
			[Expression],
			"Is Hidden", [IsHidden],
			"Storage Mode", [StorageMode]
		),
		SELECTCOLUMNS(FILTER(_columns, [Category] = "RowNumber"),
			[Table],
			"Rows", [Cardinality]
		)
	)
VAR _measures =
	NATURALLEFTOUTERJOIN(
		SELECTCOLUMNS(
			INFO.VIEW.MEASURES(),
			"Measures", BLANK(),
			"Measure", [Name],
			[Description],
			"Data Type", [DataType],
			[Expression], 
			"Format String", [FormatStringDefinition], 
			[Table], 
			"Display Folder", [DisplayFolder],
			"Is Hidden", [IsHidden],
			[State],
			"Expression Length", LEN([Expression]),
			"Is Iterator",
				IF (
				    COUNTROWS (
				        FILTER (
				            _iteratorFunctions,
				            CONTAINSSTRING ([Expression], [Value])
				        )
				    ) > 0,
				    TRUE,
				    FALSE
				)
		),
		SELECTCOLUMNS(
			GROUPBY(FILTER(_dependencies, [Referenced Type] = "MEASURE" && [Type] = "Measure"), [Object], "Referenced Measures", COUNTX(CURRENTGROUP(),[Table])),
				"Measure", [Object],
				[Referenced Measures]
		)
	)
VAR _relationships =
	SELECTCOLUMNS(
		INFO.VIEW.RELATIONSHIPS(),
		"Relationships", BLANK(),
		[Relationship],
		[Name],
		"Is Active", [IsActive],
		"Direction", [CrossFilteringBehavior],
		"From Table", [FromTable],
		"From Column", [FromColumn],
		"To Table", [ToTable],
		"To Column", [ToColumn],
		"Cardinality", [FromCardinality] & " to " & [ToCardinality]
	)
VAR _incrementalTables =
	SELECTCOLUMNS(
		INFO.REFRESHPOLICIES(),
		"Incremental Tables", BLANK(),
		"Table", MINX(FILTER(_tablesTbl, [Table ID] = [TableID]), [Table]),
		"Rolling Window History", [RollingWindowPeriods] & " " & MINX(FILTER(_refreshGranularity, [RollingWindowGranularity] = [Granularity ID]), [Granularity]),
		"Incremental Window", [IncrementalPeriods] & " " & MINX(FILTER(_refreshGranularity, [IncrementalGranularity] = [Granularity ID]), [Granularity]),
		"Incremental Window End",  "Refresh Date - " & [IncrementalPeriodsOffset] & " " & MINX(FILTER(_refreshGranularity, [IncrementalGranularity] = [Granularity ID]), [Granularity]),
		"Refresh Mode", MINX(FILTER(_refreshMode, [Refresh Mode ID] = [PolicyType]), [Refresh Mode])
	)
VAR _rlsRoles =
	SELECTCOLUMNS(_rlsTbl,
		"RLS Roles", BLANK(),
		[Role],
		[Description]
	)
VAR _rlsFilters =
	VAR _rlsFiltersTbl =
		SELECTCOLUMNS(
			INFO.TABLEPERMISSIONS(),
			"Role ID", [RoleID],
			"RLS Table ID", [TableID],
			"Filter Expression", [FilterExpression]
		)
	RETURN
		SELECTCOLUMNS(
			_rlsFiltersTbl,
			"RLS Filters", BLANK(),
			"Role", MINX(FILTER(_rlsTbl, [Role ID] = [RLS Role ID]), [Role]),
			"Table", MINX(FILTER(_tablesTbl, [Table ID] = [RLS Table ID]), [Table]),
			[Filter Expression]
		)
VAR _otherQueries =
	SELECTCOLUMNS(
		INFO.EXPRESSIONS(),
		"Other Queries", BLANK(),
		"Query Name", [Name],
		"Description", [Description],
		"Expression", [Expression]
	)
EVALUATE
	_info
EVALUATE
	_tables
EVALUATE
	_columns
EVALUATE
	_measures
EVALUATE
	_relationships
EVALUATE
	_otherQueries
EVALUATE
	_incrementalTables
EVALUATE
	_rlsRoles
EVALUATE
	_rlsFilters
EVALUATE
	_dependencies

/*
This query is intended to be run in 'DAX Studio.
It is designed to speed up report documentation.
Change the 'Results' dropdown to 'Static' in the 'Home' tab > 'Output' option.
*/
