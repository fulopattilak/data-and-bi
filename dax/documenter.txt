// This query is intended to be run in 'DAX Studio.
// It is designed to speed up report documentation.
// Change the 'Results' dropdown to 'Static' in the 'Home' tab > 'Output' option.

DEFINE
 
VAR _info = 
	{
		("POWER BI",,"Created at: ",FORMAT(UTCNOW(), "d. mmm yyyy, h:nn") & " UTC"),
		("DOCUMENTATION",,"Script: ","https://github.com/fulopattilak/data-and-bi/wiki/Report-documentation-with-DAX-Studio"),
		(,,,),
		(,"Sheet", "Table Name", "Description"),
		(,,,),
		(,"Query 2", "Tables", "Describes the tables loaded from Power Query and all calculated tables."),
		(,"Query 3", "Columns", "Describes columns and calculated columns."),
		(,"Query 4", "Measures", "Describes all measures."),
		(,"Query 5", "Relationships","Describes the relationships between tables."),
		(,"Query 6", "Other Queries","Describes the queries that are used in Power Query, but not loaded to the model."),
		(,"Query 7", "Incremental Tables", "Describes the incremental refresh policy of the tables."),
		(,"Query 8", "RLS Roles", "Lists the RLS roles that are set."),
		(,"Query 9", "RLS Filters", "Describes the filtering criteria for RLS roles."),
		(,"Query 10", "Calculation Groups", "Lists Calculation groups."),
		(,"Query 11", "Calculation Items", "Describes the Calculation items defined inside Calculation groups."),
		(,"Query 12", "Dependencies", "Describes table column and measure dependencies.")
	}

// DIM tables

VAR _iteratorFunctions = 
	{
		"SUMX(",
		"AVERAGEX(",
		"MINX(",
		"MAXX(",
		"COUNTX(",
		"RANKX(",
		"PRODUCTX(",
		"FILTER(",
		"CALCULATETABLE(",
		"ADDCOLUMNS(",
		"GENERATE(",
		"GENERATEALL(",
		"GROUPBY(",
		"SELECTCOLUMNS(",
		"SUMMARIZE(",
		"SUMMARIZECOLUMNS("
	}
VAR _refreshGranularity =
	DATATABLE("Granularity",STRING,"Granularity ID",INTEGER,
		{
			{"Invalid", -1},
			{"Day(s)", 0},
			{"Month(s)", 1},
			{"Quarter(s)", 2},
			{"Year(s)", 3}
		}
	)
VAR _refreshMode =
	DATATABLE("Refresh Mode", STRING, "Refresh Mode ID", INTEGER, "Refresh Mode Description", STRING,
		{
			{"Import", 0, "Creates import partitions during incremental refresh."},
			{"Hybrid", 1, "Creates import and DirectQuery partitions during incremental refresh."}
		}
	)

// STAGING tables

VAR _rlsTbl =
	SELECTCOLUMNS(
		INFO.ROLES(),
		"RLS Role ID", [ID],
		"Role", [Name],
		"Description", [Description]
	)
VAR _tablesTbl =
	SELECTCOLUMNS(
		INFO.TABLES(),
			"Table ID", [ID],
			"Table", [Name]
	)

VAR _calcGroupsTbl =
	NATURALINNERJOIN(
		SELECTCOLUMNS(
			INFO.CALCULATIONGROUPS(),
			"Calculation Group ID", [ID],
			"Table ID", [TableID],
			[Description]
		),
		_tablesTbl
	)
// OUTPUT tables

VAR _dependencies =
	SELECTCOLUMNS(INFO.CALCDEPENDENCY(),
		"Dependencies", BLANK(),
		"Object", [OBJECT],
		"Table", [TABLE],
		"Type", [OBJECT_TYPE],
		"Referenced Object", [REFERENCED_OBJECT],
		"Referenced Table", [REFERENCED_TABLE],
		"Referenced Type", [REFERENCED_OBJECT_TYPE]
	)
VAR _columns =
	NATURALINNERJOIN(
		SELECTCOLUMNS(
			INFO.VIEW.COLUMNS(),
			"Columns", BLANK(),
			[Table],
			"Column", [Name],
			[Description],
			"DAX", [Expression],
			"Format String", [FormatString],
			"Data Type", [DataType],
			"Is Hidden", [IsHidden],
			"Is Unique", [IsUnique],
			"Sorted By", [SortByColumn],
			"Category", [DataCategory]
		),
		SELECTCOLUMNS(
			COLUMNSTATISTICS(),
			"Table", [Table Name],
			"Column", [Column Name],
			"Lowest Value", [Min],
			"Highest Value", [Max],
			[Cardinality],
			[Max Length]
		)
	)
VAR _tables =
	NATURALINNERJOIN(
		NATURALINNERJOIN(
			SELECTCOLUMNS(
				INFO.VIEW.TABLES(),
				"Tables", BLANK(),
				"Table", [Name],
				[Description],
				"Is Hidden", [IsHidden],
				"Storage Mode", [StorageMode]
			),
			SELECTCOLUMNS(FILTER(_columns, [Category] = "RowNumber"),
				[Table],
				"Rows", [Cardinality]
			)
		),
		SELECTCOLUMNS(
			INFO.PARTITIONS(),
			"Table", [Name],
			"DAX or Query", [QueryDefinition]
		)
	)
VAR _measures =
	NATURALLEFTOUTERJOIN(
		NATURALLEFTOUTERJOIN(
			SELECTCOLUMNS(
				INFO.VIEW.MEASURES(),
				"Measures", BLANK(),
				"Measure", [Name],
				[Description],
				"Data Type", [DataType],
				"DAX", [Expression], 
				"Format String", [FormatStringDefinition], 
				[Table], 
				"Display Folder", [DisplayFolder],
				"Is Hidden", [IsHidden],
				[State],
				"DAX Length", LEN([Expression]),
				"Is Iterator",
					IF (
						COUNTROWS (
							FILTER (
								_iteratorFunctions,
								CONTAINSSTRING (
                                    SUBSTITUTE(UPPER([Expression]),
							        " ",""), [Value])
							)
						) > 0,
						TRUE,
						FALSE
					),
				"Variables",
					VAR _exp =
						SUBSTITUTE(
						SUBSTITUTE(
						SUBSTITUTE(
						SUBSTITUTE( UPPER([Expression]),
							" ",""),
							"|", "~"),
							UNICHAR(9), ""),
							UNICHAR(10) & "VAR","|")
					VAR _cnt = PATHLENGTH(_exp) - 1 + IF(LEFT(_exp, 3) = "VAR", 1,0)
					RETURN
						IF(_cnt <= 0,BLANK(), _cnt)
			),
			SELECTCOLUMNS(
				GROUPBY(FILTER(_dependencies, [Referenced Type] = "MEASURE" && [Type] = "MEASURE"), [Object], "Referenced Measures", COUNTX(CURRENTGROUP(),1)),
					"Measure", [Object],
					[Referenced Measures]
			)
		),
		SELECTCOLUMNS(
		GROUPBY(FILTER(_dependencies, [Type] = "MEASURE"), [Object], "Referenced Objects", COUNTX(CURRENTGROUP(),1)),
			"Measure", [Object],
			[Referenced Objects]
		)
	)
VAR _relationships =
	SELECTCOLUMNS(
		INFO.VIEW.RELATIONSHIPS(),
		"Relationships", BLANK(),
		[Relationship],
		[Name],
		"Is Active", [IsActive],
		"Direction", [CrossFilteringBehavior],
		"From Table", [FromTable],
		"From Column", [FromColumn],
		"To Table", [ToTable],
		"To Column", [ToColumn],
		"Cardinality", [FromCardinality] & " to " & [ToCardinality]
	)
VAR _incrementalTables =
	SELECTCOLUMNS(
		INFO.REFRESHPOLICIES(),
		"Incremental Tables", BLANK(),
		"Table", MINX(FILTER(_tablesTbl, [Table ID] = [TableID]), [Table]),
		"Rolling Window History", [RollingWindowPeriods] & " " & MINX(FILTER(_refreshGranularity, [RollingWindowGranularity] = [Granularity ID]), [Granularity]),
		"Incremental Window", [IncrementalPeriods] & " " & MINX(FILTER(_refreshGranularity, [IncrementalGranularity] = [Granularity ID]), [Granularity]),
		"Incremental Window End",  "Refresh Date - " & [IncrementalPeriodsOffset] & " " & MINX(FILTER(_refreshGranularity, [IncrementalGranularity] = [Granularity ID]), [Granularity]),
		"Refresh Mode", MINX(FILTER(_refreshMode, [Refresh Mode ID] = [PolicyType]), [Refresh Mode])
	)
VAR _rlsRoles =
	SELECTCOLUMNS(_rlsTbl,
		"RLS Roles", BLANK(),
		[Role],
		[Description]
	)
VAR _rlsFilters =
	VAR _rlsFiltersTbl =
		SELECTCOLUMNS(
			INFO.TABLEPERMISSIONS(),
			"Role ID", [RoleID],
			"RLS Table ID", [TableID],
			"DAX", [FilterExpression]
		)
	RETURN
		SELECTCOLUMNS(
			_rlsFiltersTbl,
			"RLS Filters", BLANK(),
			"Role", MINX(FILTER(_rlsTbl, [Role ID] = [RLS Role ID]), [Role]),
			"Table", MINX(FILTER(_tablesTbl, [Table ID] = [RLS Table ID]), [Table]),
			[DAX]
		)
VAR _otherQueries =
	SELECTCOLUMNS(
		INFO.EXPRESSIONS(),
		"Other Queries", BLANK(),
		"Query Name", [Name],
		"Description", [Description],
		"Query", [Expression]
	)
VAR _calcGroups =
	SELECTCOLUMNS(
		_calcGroupsTbl,
		"Calculation Groups", BLANK(),
		"Calculation Group", [Table],
		[Description]
	)
VAR _calcItems =
	SELECTCOLUMNS(
		NATURALINNERJOIN(
			SELECTCOLUMNS(
				INFO.CALCULATIONITEMS(),
				"Calculation Group ID", [CalculationGroupID],
				[Name],
				[Description],
				"DAX", [Expression]

			),
			SELECTCOLUMNS(
				_calcGroupsTbl,
				[Calculation Group ID],
				[Table]
			)
		),
		"Calculation Items", BLANK(),
		"Calculation Group", [Table],
		"Calculation Item", [Name],
		[Description],
		[DAX]
	)
	
EVALUATE _info
EVALUATE _tables
EVALUATE _columns
EVALUATE _measures
EVALUATE _relationships
EVALUATE _otherQueries
EVALUATE _incrementalTables
EVALUATE _rlsRoles
EVALUATE _rlsFilters
EVALUATE _calcGroups
EVALUATE _calcItems
EVALUATE _dependencies


// This query is intended to be run in 'DAX Studio.
// It is designed to speed up report documentation.
// Change the 'Results' dropdown to 'Static' in the 'Home' tab > 'Output' option.
